---
- name: Remediate Nginx Service
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - vars/main.yml

  vars:
    max_retries: 3
    retry_delay: 30

  tasks:
    - name: Remediation and notification block
      block:
        - name: Create ServiceNow Incident
          servicenow.itsm.incident:
            instance:
              host: "{{ servicenow_instance }}"
              username: "{{ servicenow_username }}"
              password: "{{ servicenow_password }}"
            state: new
            caller: "admin"
            short_description: "[ALERT] Nginx Service Down"
            description: "{{ lookup('template', 'templates/servicenow_initial.j2') }}"
            impact: "high"
            urgency: "high"
            other:
              comments: "Alert received by Red Hat EDA, triaging the issue"
          register: snow_incident
          tags:
            - servicenow
            - always

        - name: Send initial Slack notification
          community.general.slack:
            token: "{{ vault_slack_token }}"
            channel: "#incident-alerts"
            msg: "{{ lookup('template', 'templates/slack_initial.j2') }}"
          tags:
            - always
            - slack
            - initial_notification

        - name: Check Nginx service status
          ansible.builtin.service:
            name: nginx
            state: started
          register: nginx_status
          ignore_errors: true

        - name: Start Nginx service if it's down
          ansible.builtin.service:
            name: nginx
            state: started
          when: nginx_status.failed

        - name: Verify Nginx service is running
          ansible.builtin.service:
            name: nginx
            state: started
          register: nginx_verification

        - name: Update ServiceNow Incident - Remediation Successful
          servicenow.itsm.incident:
            instance:
              host: "{{ servicenow_instance }}"
              username: "{{ servicenow_username }}"
              password: "{{ servicenow_password }}"
            state: resolved
            number: "{{ snow_incident.record.number }}"
            close_code: "Solved (Permanently)"
            close_notes: "[RESOLVED] Nginx Service Restored on {{ inventory_hostname }}"
            other:
              comments: "{{ lookup('template', 'templates/servicenow_success.j2') }}"
          when: nginx_verification.state == "started"
          tags:
            - servicenow

        - name: Send Slack notification - Remediation Successful
          community.general.slack:
            token: "{{ vault_slack_token }}"
            channel: "#incident-alerts"
            msg: "{{ lookup('template', 'templates/slack_success.j2') }}"
          when: nginx_verification.state == "started"
          tags:
            - slack
            - notification
            - success

      rescue:
        - name: Collect system information
          tags:
            - system_info
          block:
            - name: Check Nginx configuration
              ansible.builtin.shell:
                cmd: nginx -t
              register: nginx_config_check
              changed_when: false
              ignore_errors: true

            - name: Check Nginx error log
              ansible.builtin.command:
                cmd: tail -n 100 /var/log/nginx/error.log
              register: nginx_error_log
              ignore_errors: true
              changed_when: false

            - name: Check system memory
              ansible.builtin.command:
                cmd: free -m
              register: system_memory
              ignore_errors: true
              changed_when: false

            - name: Check disk usage
              ansible.builtin.command:
                cmd: df -h
              register: disk_usage
              ignore_errors: true
              changed_when: false

            - name: Check running processes
              ansible.builtin.command:
                cmd: ps aux
              register: running_processes
              ignore_errors: true
              changed_when: false

        - name: Update ServiceNow Incident - Remediation Failed
          servicenow.itsm.incident:
            instance:
              host: "{{ servicenow_instance }}"
              username: "{{ servicenow_username }}"
              password: "{{ servicenow_password }}"
            state: in_progress
            number: "{{ snow_incident.record.number }}"
            other:
              work_notes: "{{ lookup('template', 'templates/servicenow_failure.j2') }}"
          register: snow_update_result
          failed_when: snow_update_result.failed and not snow_update_result.changed
          tags:
            - servicenow
            - failure

        - name: Send Slack notification - Remediation Failed
          community.general.slack:
            token: "{{ vault_slack_token }}"
            channel: "#incident-alerts"
            msg: "{{ lookup('template', 'templates/slack_failure.j2') }}"
          register: slack_failure_result
          failed_when: slack_failure_result is failed and slack_failure_result.msg != "No message to send"
          tags:
            - slack
            - notification
            - failure

      always:
        - name: Final Slack notification
          community.general.slack:
            token: "{{ vault_slack_token }}"
            channel: "#incident-alerts"
            msg: "{{ lookup('template', 'templates/slack_final.j2') }}"
          register: slack_final_result
          failed_when: false
          tags:
            - slack
            - notification
            - always
