---
- name: Remediate Nginx Service
  hosts: all
  become: true
  gather_facts: false

  vars_files:
    - vars/main.yml

  tasks:
    - name: Create ServiceNow Incident
      servicenow.itsm.incident:
        instance:
          host: "{{ servicenow_instance }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        state: new
        caller: "admin"
        short_description: "[ALERT] Nginx Service Down"
        description: |
          DataDog has reported that the Nginx service is not running on {{ inventory_hostname }}.

          Alert details:
          - Monitor Name: Nginx Service Check
          - Host: {{ inventory_hostname }}
          - Alert Status: {{ alert_status }}
          - Triggered at: {{ alert_timestap }}
          - Last check: {{ alert_last_updated }}

          Error: The Nginx process is not running or is unresponsive.

          Potential impact:
          - Web services may be unavailable
          - Incoming HTTP requests may fail
          - Load balancing could be affected

          This alert requires immediate attention. Automated remediation has been initiated.

          Alert ID: {{ alert_id }}
          DataDog Alert Link: {{ alert_link }}

        impact: "high"
        urgency: "high"
        other:
          comments: "Alert received by Red Hat EDA, triaging the issue"
      register: snow_incident
      tags:
        - servicenow

    - name: Check Nginx service status
      ansible.builtin.service:
        name: nginx
        state: started
      register: nginx_status
      ignore_errors: true

    - name: Start Nginx service if it's down
      ansible.builtin.service:
        name: nginx
        state: started
      when: nginx_status.failed

    - name: Verify Nginx service is running
      ansible.builtin.service:
        name: nginx
        state: started
      register: nginx_verification

    - name: Update ServiceNow Incident - Remediation Successful
      servicenow.itsm.incident:
        instance:
          host: "{{ servicenow_instance }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        state: resolved
        number: "{{ snow_incident.record.number }}"
        close_code: "Solved (Permanently)"
        close_notes: "Nginx service has been successfully restarted and verified."
        other:
          work_notes: "Nginx service was down, the service was restarted by Ansible Automation Platform"
          comments: "Nginx up and running please validate"
      when: nginx_verification.state == "started"
      tags:
        - servicenow

    - name: Update ServiceNow Incident - Remediation Failed
      servicenow.itsm.incident:
        instance:
          host: "{{ servicenow_instance }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        state: in_progress
        number: "{{ snow_incident.record.number }}"
        other:
          work_notes: "Nginx service was down, Ansible Automation Platform attempted to restart the service without success"
      when: nginx_verification.state != "started"

    - name: Send notification if remediation was successful
      ansible.builtin.debug:
        msg: "Nginx service on {{ inventory_hostname }} has been successfully started."
      when: nginx_verification.state == "started"

    - name: Send alert if remediation failed
      ansible.builtin.debug:
        msg: "Failed to start Nginx service on {{ inventory_hostname }}. Manual intervention required."
      when: nginx_verification.state != "started"

#    - name: Update Datadog event with remediation status
#      community.general.datadog_event:
#        api_key: "{{ vault_datadog_api_key }}"
#        app_key: "{{ vault_datadog_app_key }}"
#        title: "Nginx Remediation on {{ inventory_hostname }}"
#        text: >
#          {% if nginx_verification.state == "started" %}
#          Nginx service on {{ inventory_hostname }} has been successfully started.
#          {% else %}
#          Failed to start Nginx service on {{ inventory_hostname }}. Manual intervention required.
#          {% endif %}
#          Alert details: {{ alert_title }}
#          Alert triggered at: {{ alert_timestamp | int | to_datetime }}
#        alert_type: "{{ 'success' if nginx_verification.state == 'started' else 'error' }}"
#        date_happened: "{{ ansible_date_time.epoch | int }}"
#        host: "{{ inventory_hostname }}"
#        tags:
#          - "project:eda-monitoring-demo"
#          - "role:web"
#          - "service:nginx"
