---
- name: Bootstrap Ansible Automation Platform for EDA Monitoring Demo
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - vars/bootstrap_vars.yml

  tasks:
    # AAP Organization Setup
    - name: Create AAP Organization
      ansible.controller.organization:
        name: "{{ aap_organization }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    # Credential Creation
    - name: Create AWS credentials in AAP
      ansible.controller.credential:
        name: "{{ project_name }}-aws-cred"
        credential_type: Amazon Web Services
        organization: "{{ aap_organization }}"
        inputs:
          username: "{{ aws_access_key }}"
          password: "{{ aws_secret_key }}"
          security_token: "{{ aws_session_token | default(omit) }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    - name: Create AAP credentials in AAP
      ansible.controller.credential:
        name: "{{ project_name }}-aap-cred"
        credential_type: Red Hat Ansible Automation Platform
        organization: "{{ aap_organization }}"
        inputs:
          host: "{{ aap_hostname }}"
          username: "{{ aap_username }}"
          password: "{{ aap_password }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    - name: Create Ansible Vault credential in AAP
      ansible.controller.credential:
        name: "{{ project_name }}-vault-cred"
        credential_type: Vault
        organization: "{{ aap_organization }}"
        inputs:
          vault_password: "{{ vault_password }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    - name: Create machine credential in AAP
      ansible.controller.credential:
        name: "{{ project_name }}-machine-cred"
        credential_type: Machine
        organization: "{{ aap_organization }}"
        inputs:
          username: "ec2-user"
          ssh_key_data: "{{ vault_ssh_private_key }}"
          # ssh_key_unlock: "{{ ssh_key_password }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    # Project Setup
    - name: Create or update project in AAP
      ansible.controller.project:
        name: "{{ project_name }}"
        organization: "{{ aap_organization }}"
        scm_type: git
        scm_url: "{{ project_repo_url }}"
        scm_branch: main
        state: present
        update_project: true
        wait: true
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
      register: project_result

    - name: Force project update if it already existed
      ansible.controller.project_update:
        project: "{{ project_name }}"
        wait: true
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
      when: not project_result.changed

    # Execution Environment Setup
    - name: Create execution environment in AAP
      ansible.controller.execution_environment:
        name: "{{ project_name }}-ee"
        organization: "{{ aap_organization }}"
        image: "{{ ee_image }}"
        pull: always
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    # Inventory Setup
    - name: Create inventory in AAP
      ansible.controller.inventory:
        name: "{{ project_name }}-inventory"
        organization: "{{ aap_organization }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
    
    - name: Create inventory source for AWS
      ansible.controller.inventory_source:
        name: "AWS EC2 Source"
        inventory: "{{ project_name }}-inventory"
        source: "ec2"
        credential: "{{ project_name }}-aws-cred"
        update_on_launch: true
        overwrite: true
        source_vars:
          regions:
            - "{{ aws_region }}"
          filters:
            tag:Project: "{{ project_name }}"
          keyed_groups:
            - key: tags.Group
              separator: ""
          compose:
            ansible_host: public_ip_address
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    # Job Template Creation
    - name: Create job template for AWS provisioning
      ansible.controller.job_template:
        name: "{{ project_name }} - AWS Provision"
        job_type: run
        organization: "{{ aap_organization }}"
        project: "{{ project_name }}"
        inventory: "{{ project_name }}-inventory"
        playbook: "bootstrap/aws_provisioning/main.yml"
        credentials:
          - "{{ project_name }}-aws-cred"
          - "{{ project_name }}-aap-cred"
        execution_environment: "{{ project_name }}-ee"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    - name: Create job template for host management
      ansible.controller.job_template:
        name: "{{ project_name }} - Host Management"
        job_type: run
        organization: "{{ aap_organization }}"
        project: "{{ project_name }}"
        inventory: "{{ project_name }}-inventory"
        playbook: "bootstrap/host_management/main.yml"
        execution_environment: "{{ project_name }}-ee"
        credentials:
          - "{{ project_name }}-vault-cred"
          - "{{ project_name }}-machine-cred"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false

    # Workflow Template Creation
    - name: Create workflow template
      ansible.controller.workflow_job_template:
        name: "{{ project_name }} - Full Deployment"
        organization: "{{ aap_organization }}"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
      register: workflow_template

    - name: Add AWS provisioning node to workflow
      ansible.controller.workflow_job_template_node:
        workflow_job_template: "{{ project_name }} - Full Deployment"
        unified_job_template: "{{ project_name }} - AWS Provision"
        organization: "{{ aap_organization }}"
        identifier: "aws-provision-node"
        state: present
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
      register: aws_node

    - name: Add host management node to workflow
      ansible.controller.workflow_job_template_node:
        workflow_job_template: "{{ project_name }} - Full Deployment"
        unified_job_template: "{{ project_name }} - Host Management"
        organization: "{{ aap_organization }}"
        identifier: "host-management-node"
        state: present
        success_nodes:
          - "aws-provision-node"
        controller_host: "{{ aap_hostname }}"
        controller_username: "{{ aap_username }}"
        controller_password: "{{ aap_password }}"
        validate_certs: false
